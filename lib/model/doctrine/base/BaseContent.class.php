<?php

/**
 * BaseContent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $shortdesc
 * @property string $longdesc
 * @property enum $type
 * @property string $full_content
 * @property string $prev_content
 * @property string $thmb_content
 * @property integer $user_id
 * @property integer $directive_id
 * @property integer $fullaccess_id
 * @property integer $prevaccess_id
 * @property User $User
 * @property Directive $Directive
 * @property Ranking $FullAccess
 * @property Ranking $PrevAccess
 * @property Doctrine_Collection $ContentThread
 * 
 * @method string              getName()          Returns the current record's "name" value
 * @method string              getShortdesc()     Returns the current record's "shortdesc" value
 * @method string              getLongdesc()      Returns the current record's "longdesc" value
 * @method enum                getType()          Returns the current record's "type" value
 * @method string              getFullContent()   Returns the current record's "full_content" value
 * @method string              getPrevContent()   Returns the current record's "prev_content" value
 * @method string              getThmbContent()   Returns the current record's "thmb_content" value
 * @method integer             getUserId()        Returns the current record's "user_id" value
 * @method integer             getDirectiveId()   Returns the current record's "directive_id" value
 * @method integer             getFullaccessId()  Returns the current record's "fullaccess_id" value
 * @method integer             getPrevaccessId()  Returns the current record's "prevaccess_id" value
 * @method User                getUser()          Returns the current record's "User" value
 * @method Directive           getDirective()     Returns the current record's "Directive" value
 * @method Ranking             getFullAccess()    Returns the current record's "FullAccess" value
 * @method Ranking             getPrevAccess()    Returns the current record's "PrevAccess" value
 * @method Doctrine_Collection getContentThread() Returns the current record's "ContentThread" collection
 * @method Content             setName()          Sets the current record's "name" value
 * @method Content             setShortdesc()     Sets the current record's "shortdesc" value
 * @method Content             setLongdesc()      Sets the current record's "longdesc" value
 * @method Content             setType()          Sets the current record's "type" value
 * @method Content             setFullContent()   Sets the current record's "full_content" value
 * @method Content             setPrevContent()   Sets the current record's "prev_content" value
 * @method Content             setThmbContent()   Sets the current record's "thmb_content" value
 * @method Content             setUserId()        Sets the current record's "user_id" value
 * @method Content             setDirectiveId()   Sets the current record's "directive_id" value
 * @method Content             setFullaccessId()  Sets the current record's "fullaccess_id" value
 * @method Content             setPrevaccessId()  Sets the current record's "prevaccess_id" value
 * @method Content             setUser()          Sets the current record's "User" value
 * @method Content             setDirective()     Sets the current record's "Directive" value
 * @method Content             setFullAccess()    Sets the current record's "FullAccess" value
 * @method Content             setPrevAccess()    Sets the current record's "PrevAccess" value
 * @method Content             setContentThread() Sets the current record's "ContentThread" collection
 * 
 * @package    HELLO_WORLD
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseContent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('content');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('shortdesc', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('longdesc', 'string', 2550, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '2550',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'video',
              1 => 'audio',
              2 => 'document',
             ),
             ));
        $this->hasColumn('full_content', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('prev_content', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('thmb_content', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('directive_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('fullaccess_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('prevaccess_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Directive', array(
             'local' => 'directive_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Ranking as FullAccess', array(
             'local' => 'fullaccess_id',
             'foreign' => 'id'));

        $this->hasOne('Ranking as PrevAccess', array(
             'local' => 'prevaccess_id',
             'foreign' => 'id'));

        $this->hasMany('Thread as ContentThread', array(
             'local' => 'id',
             'foreign' => 'content_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}